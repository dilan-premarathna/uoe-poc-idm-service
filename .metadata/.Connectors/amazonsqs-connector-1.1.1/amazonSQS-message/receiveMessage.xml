<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<template name="receiveMessage" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="attributes"
               description="A list of attributes that need to be returned along with each message"/>
    <parameter name="maxNumberOfMessages" description="The maximum number of messages to return"/>
    <parameter name="messageAttributeNames"
               description="The name of the message attribute, where N is the index"/>
    <parameter name="visibilityTimeout"
               description="The duration (in seconds) that the received messages are hidden from subsequent retrieve requests after being retrieved by a ReceiveMessage request"/>
    <parameter name="waitTimeSeconds"
               description="The duration (in seconds) for which the call will wait for a message to arrive in the queue before returning"/>
    <parameter name="queueId" description="The unique identifier of the queue"/>
    <parameter name="queueName" description="The name of the queue"/>
    <sequence>
        <class name="org.wso2.carbon.connector.amazonsqs.auth.AmazonSQSContext"/>
        <property name="uri.var.queueId" expression="$func:queueId"/>
        <property name="uri.var.urlQueueName" expression="$func:queueName"/>
        <property name="uri.var.attributes" expression="$func:attributes"/>
        <property name="uri.var.maxNumberOfMessages" expression="$func:maxNumberOfMessages"/>
        <property name="uri.var.messageAttributeNames" expression="$func:messageAttributeNames"/>
        <property name="uri.var.visibilityTimeout" expression="$func:visibilityTimeout"/>
        <property name="uri.var.waitTimeSeconds" expression="$func:waitTimeSeconds"/>
        <property name="uri.var.action" value="ReceiveMessage"/>
        <class name="org.wso2.carbon.connector.amazonsqs.auth.AmazonSQSAuthConnector"/>
        <!-- Add authorization and date header parameters -->
        <header name="Authorization" scope="transport"
                expression="get-property('uri.var.authorizationHeader')"/>
        <header name="x-amz-date" scope="transport"
                expression="get-property('uri.var.amzDate')"/>
        <payloadFactory media-type="json">
            <format>
                $1
            </format>
            <args>
                <arg expression="get-property('uri.var.requestPayload')"/>
            </args>
        </payloadFactory>
        <property name="messageType" value="application/x-www-form-urlencoded" scope="axis2"/>
        <property name="DISABLE_CHUNKING" value="true" scope="axis2"/>
        <filter source="$ctx:amazonSQSBlocking" regex="true">
            <then>
                <call blocking="true">
                    <endpoint>
                        <http method="post" uri-template="{uri.var.apiUrl}{+uri.var.httpRequestUri}"/>
                    </endpoint>
                </call>
            </then>
            <else>
                <call>
                    <endpoint>
                        <http method="post" uri-template="{uri.var.apiUrl}{+uri.var.httpRequestUri}"/>
                    </endpoint>
                </call>
            </else>
        </filter>
        <!-- Remove custom header information -->
        <header name="Proxy-Connection" scope="transport" action="remove"/>
        <header name="x-amzn-RequestId" scope="transport" action="remove"/>
        <header name="Via" scope="transport" action="remove"/>
    </sequence>
</template>